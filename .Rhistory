tags[tags$Id == i, "Tag"]
}
for (i in questions$Id[2]) {
return tags[tags$Id == i, "Tag"]
for (i in questions$Id[2]) {
print(tags[tags$Id == i, "Tag"])
}
for (i in questions$Id[2]) {
print.AsIs(tags[tags$Id == i, "Tag"])
}
x$t <- for (i in questions$Id[2]) {
print.AsIs(tags[tags$Id == i, "Tag"])
}
x <- data.frame()
x$t <- for (i in questions$Id[2]) {
print.AsIs(tags[tags$Id == i, "Tag"])
}
View(x)
x$t <- for (i in questions$Id[2]) {
print.AsIs(tags[tags$Id == i, "Tag"])
}
x$t <- for (i in questions$Id[2]) {
tags[tags$Id == i, "Tag"]
}
x$t <- for (i in questions$Id[2]) {
tags[tags$Id == i, "Tag"]
}
x$t <- for (i in questions$Id[2]) {
paste(tags[tags$Id == i, "Tag"])
}
for (i in questions$Id[2]) {
x$t[0] <- tags[tags$Id == i, "Tag"]
}
View(x)
for (i in questions$Id[2]) {
x$t[0] = tags[tags$Id == i, "Tag"]
}
for (i in questions$Id[2]) {
x$t = tags[tags$Id == i, "Tag"]
}
x$t <- for (i in questions$Id[2]) {
print.AsIs(tags[tags$Id == i, "Tag"])
}
for (i in questions$Id[2]) {
for(k in tags[tags$Id == i, "Tag"]){
if(k in t){ x$t[0] = k}
for (i in questions$Id[2]) {
for(k in tags[tags$Id == i, "Tag"]){
if(k %in% t){ x$t[0] = k}
}
}
for (i in questions$Id[2]) {
for(k in tags[tags$Id == i, "Tag"]){
if(k %in% t){ print(k)}
}
}
remove(k)
for (i in questions$Id[2]) {
for(k in tags[tags$Id == i, "Tag"]){
if(k %in% t){ print(k)}
}
}
class(t)
t <- as.vector(t)
for(i in t){}
for(i in t){ print(i)}
"iterate" %in% t
"iteration" %in% t
("iteration" %in% t){print("yup")}
if("iteration" %in% t){print("yup")}
for (i in questions$Id[2]) {
for(k in tags[tags$Id == i, "Tag"]){
if(k %in% t){ print("up")}
}
}
for (i in questions$Id[2]) {
lapply(tags[tags$Id == i, "Tag"], 1, function(k) if(k %in% t){ print(k)})
}
for (i in questions$Id[2]) {
lapply(1, tags[tags$Id == i, "Tag"], function(k) if(k %in% t){ print(k)})
}
for (i in questions$Id[2]) {
lapply(tags[tags$Id == i, "Tag"], function(k) if(k %in% t){ print(k)})
}
for (i in questions$Id[2]) {
apply(tags[tags$Id == i, "Tag"], function(k) if(k %in% t){ print(k)})
}
for (i in questions$Id[2]) {
apply(1,tags[tags$Id == i, "Tag"], function(k) if(k %in% t){ print(k)})
}
for (i in questions$Id[2]) {
apply(tags[tags$Id == i, "Tag"], 1, function(k) if(k %in% t){ print(k)})
}
for (i in questions$Id[2]) {
apply(tags[tags$Id == i, "Tag"], 1, function(k) if(k %in% t){ print(k)})
}
for (i in questions$Id[2]) {
apply(tags[tags$Id == i, "Tag"], 2, function(k) if(k %in% t){ print(k)})
}
for (i in questions$Id[2]) {
apply(tags[tags$Id == i, "Tag"], 2, function(k) if(k %in% as.vector(t)){ print(k)})
}
apply(tags[tags$Id == i, "Tag"], 2, function(k) if(k %in% c("binary-tree", "fold", "variable", "global-variables", "variable-assignment", "variable-declaration", "variable-variables", "variable-names", "local-variables", "getter", "getter-setter", "setter", "list", "list-comprehension", "nested-lists", "list-manipulation", "list-comparison", "arraylist", "sortedlist", "treelist", "listitem", "listiterator", "list-processing", "queue", "queueing", "push-queue", "pull-queue", "stack", "string", "string-formatting", "string-concatenation", "string-literals", "substring", "string-comparison", "substrings", "string-interpolation", "string-split", "format-string", "string-length", "string.format", "string-iteration", "integer", "integer-arithmetic", "int", "floating-point", "tuples", "indexing", "indexoutofboundsexception", "indexof", "indexoutofrangeexception", "predicate", "min", "max", "absolute-value", "pow", "built-in-types", "built-in", "loops", "for-loop", "while-loop", "nested-loops", "for-in-loops", "infinite-loops", "roundup", "data-structures", "higher-order-functions", "sorting", "sorted", "sum", "sum-of-digits", "mutators", "constructor", "boolean", "boolean-logic", "boolean-expression", "", "boolean-operations", "extend", "if-statement", "parameters", "optional-parameters", "lambda", "dictionary", "ordereddictionary", "sorteddictionary", "dictionary-comprehension", "append", "insert", "arguments", "indentation", "auto-indent", "recursion", "expression", "function", "map", "variable-assignment", "multiple-assignment", "elements", "element", "nth-element", "interable", "iteration", "iterator")){ print(k)})
for (i in questions$Id[2]) {
apply(tags[tags$Id == i, "Tag"], 2, function(k) if(k %in% c("binary-tree", "fold", "variable", "global-variables", "variable-assignment", "variable-declaration", "variable-variables", "variable-names", "local-variables", "getter", "getter-setter", "setter", "list", "list-comprehension", "nested-lists", "list-manipulation", "list-comparison", "arraylist", "sortedlist", "treelist", "listitem", "listiterator", "list-processing", "queue", "queueing", "push-queue", "pull-queue", "stack", "string", "string-formatting", "string-concatenation", "string-literals", "substring", "string-comparison", "substrings", "string-interpolation", "string-split", "format-string", "string-length", "string.format", "string-iteration", "integer", "integer-arithmetic", "int", "floating-point", "tuples", "indexing", "indexoutofboundsexception", "indexof", "indexoutofrangeexception", "predicate", "min", "max", "absolute-value", "pow", "built-in-types", "built-in", "loops", "for-loop", "while-loop", "nested-loops", "for-in-loops", "infinite-loops", "roundup", "data-structures", "higher-order-functions", "sorting", "sorted", "sum", "sum-of-digits", "mutators", "constructor", "boolean", "boolean-logic", "boolean-expression", "", "boolean-operations", "extend", "if-statement", "parameters", "optional-parameters", "lambda", "dictionary", "ordereddictionary", "sorteddictionary", "dictionary-comprehension", "append", "insert", "arguments", "indentation", "auto-indent", "recursion", "expression", "function", "map", "variable-assignment", "multiple-assignment", "elements", "element", "nth-element", "interable", "iteration", "iterator")){ print(k)})
}
for (i in questions$Id[2]) {
apply(tags[tags$Id == i, "Tag"], 2, function(k) if(as.character(k) %in% as.vector(t)){ print(k)})
}
remove(k)
for (i in questions$Id[2]) {
apply(tags[tags$Id == i, "Tag"], 2, function(k) if(as.character(k) %in% as.vector(t)){ print(k)})
}
c("iteration", "t") %in% t
for (i in questions$Id[2]) {
apply(tags[tags$Id == i, "Tag"], 2, function(k) ifelse(k %in% as.vector(t)){ print(k)})
for (i in questions$Id[2]) {
apply(tags[tags$Id == i, "Tag"], 2, function(k) ifelse(k %in% as.vector(t), print(k)))
}
for (i in questions$Id[2]) {
apply(tags[tags$Id == i, "Tag"], 2, function(k) ifelse(k %in% as.vector(t), print(k), "no"))
}
for (i in questions$Id[2]) {
apply(tags[tags$Id == i, "Tag"], 2, function(k) ifelse(k %in% as.vector(t), print(k), "no"))
}
for (i in questions$Id[2]) {
apply(tags[tags$Id == i, "Tag"], 2, function(k) ifelse(k %in% as.vector(t), print(k), print("no")))
}
for (i in questions$Id[2]) {
apply(tags[tags$Id == i, "Tag"], 2, function(k) ifelse(k %in% as.vector(t), print("yes"), print("no")))
}
for (i in questions$Id[2]) {
apply(tags[tags$Id == i, "Tag"], 2, function(k) ifelse(k %in% as.vector(t), print("yes"), print(k)))
}
length(for (i in questions$Id[2]) {
apply(tags[tags$Id == i, "Tag"], 2, function(k) ifelse(k %in% as.vector(t), print("yes"), print(k)))
})
for (i in questions$Id[2]) {
apply(tags[tags$Id == i, "Tag"], 2, function(k) ifelse(k %in% as.vector(t), print("yes"), length(k)))
}
for (i in questions$Id[2]) {
apply(tags[tags$Id == i, "Tag"], 2, function(k) ifelse(k %in% as.vector(t), print("yes"), print(length(k))))
}
for (i in questions$Id[2]) {
apply(tags[tags$Id == i, "Tag"], 1, function(k) ifelse(k %in% as.vector(t), print("yes"), print(length(k))))
}
for (i in questions$Id[2]) {
apply(tags[tags$Id == i, "Tag"], 1, function(k) ifelse(k %in% as.vector(t), print("yes"), length(k)))
}
for (i in questions$Id[2]) {
apply(tags[tags$Id == i, "Tag"], 1, function(k) ifelse(k %in% as.vector(t), print("yes"), print(k)))
}
for (i in questions$Id[2]) {
apply(tags[tags$Id == i, "Tag"], 1, function(k) ifelse(k %in% as.vector(t), print("yes"), print(k[0])))
}
for (i in questions$Id[2]) {
apply(tags[tags$Id == i, "Tag"], 1, function(k) ifelse(k %in% as.vector(t), print("yes"), print(as.character(k))))
}
"string"
as.character("string")
as.character("string") %in% t
for (i in questions$Id[2]) {
apply(tags[tags$Id == i, "Tag"], 1, function(k) ifelse(as.character(k) %in% as.vector(t), print("yes"), print(k)))
}
for (i in questions$Id[2]) {
apply(tags[tags$Id == i, "Tag"], 1, function(k) ifelse(as.character(k) %in% t, print("yes"), print(k)))
}
for (i in questions$Id[2]) {
apply(tags[tags$Id == i, "Tag"], 1, function(k) ifelse(as.character(k) %in% t, print(as.character(k)), print("no")))
}
for (i in questions$Id[1]) {
apply(tags[tags$Id == i, "Tag"], 1, function(k) ifelse(as.character(k) %in% t, print(as.character(k)), print("no")))
}
for (i in questions$Id[4]) {
apply(tags[tags$Id == i, "Tag"], 1, function(k) ifelse(as.character(k) %in% t, print(as.character(k)), print("no")))
}
for (i in questions$Id[5]) {
apply(tags[tags$Id == i, "Tag"], 1, function(k) ifelse(as.character(k) %in% t, print(as.character(k)), print("no")))
}
t <- c("binary-tree", "fold", "variable", "global-variables", "variable-assignment", "variable-declaration", "variable-variables", "variable-names", "local-variables", "getter", "getter-setter", "setter", "list", "list-comprehension", "nested-lists", "list-manipulation", "list-comparison", "arraylist", "sortedlist", "treelist", "listitem", "listiterator", "list-processing", "queue", "queueing", "push-queue", "pull-queue", "stack", "string", "string-formatting", "string-concatenation", "string-literals", "substring", "string-comparison", "substrings", "string-interpolation", "string-split", "format-string", "string-length", "string.format", "string-iteration", "integer", "integer-arithmetic", "int", "floating-point", "tuples", "indexing", "indexoutofboundsexception", "indexof", "indexoutofrangeexception", "predicate", "min", "max", "absolute-value", "pow", "built-in-types", "built-in", "loops", "for-loop", "while-loop", "nested-loops", "for-in-loops", "infinite-loops", "roundup", "data-structures", "higher-order-functions", "sorting", "sorted", "sum", "sum-of-digits", "mutators", "constructor", "boolean", "boolean-logic", "boolean-expression", "", "boolean-operations", "extend", "if-statement", "parameters", "optional-parameters", "lambda", "dictionary", "ordereddictionary", "sorteddictionary", "dictionary-comprehension", "append", "insert", "arguments", "indentation", "auto-indent", "recursion", "expression", "function", "map", "variable-assignment", "multiple-assignment", "elements", "element", "nth-element", "interable", "iteration", "iterator", "arrays", "array")
for (i in questions$Id[5]) {
apply(tags[tags$Id == i, "Tag"], 1, function(k) ifelse(as.character(k) %in% t, print(as.character(k)), print("no")))
}
c(t, "try")
c(t, c("try"))
c(t, c("try", "l"))
t <- c("binary-tree", "fold", "variable", "global-variables", "variable-assignment", "variable-declaration", "variable-variables", "variable-names", "local-variables", "getter", "getter-setter", "setter", "list", "list-comprehension", "nested-lists", "list-manipulation", "list-comparison", "arraylist", "sortedlist", "treelist", "listitem", "listiterator", "list-processing", "queue", "queueing", "push-queue", "pull-queue", "stack", "string", "string-formatting", "string-concatenation", "string-literals", "substring", "string-comparison", "substrings", "string-interpolation", "string-split", "format-string", "string-length", "string.format", "string-iteration", "integer", "integer-arithmetic", "int", "floating-point", "tuples", "indexing", "indexoutofboundsexception", "indexof", "indexoutofrangeexception", "predicate", "min", "max", "absolute-value", "pow", "built-in-types", "built-in", "loops", "for-loop", "while-loop", "nested-loops", "for-in-loops", "infinite-loops", "roundup", "data-structures", "higher-order-functions", "sorting", "sorted", "sum", "sum-of-digits", "mutators", "constructor", "boolean", "boolean-logic", "boolean-expression", "", "boolean-operations", "extend", "if-statement", "parameters", "optional-parameters", "lambda", "dictionary", "ordereddictionary", "sorteddictionary", "dictionary-comprehension", "append", "insert", "arguments", "indentation", "auto-indent", "recursion", "expression", "function", "map", "variable-assignment", "multiple-assignment", "elements", "element", "nth-element", "interable", "iteration", "iterator", "arrays", "array", "python")
remove(x)
remove(i)
library(data.table)
answers <- fread('Answers.csv', header = T, sep = ',')
answers2 <- answers
questions2 <- questions
tags2 <- tags
for (i in questions2$Id[1:length(questions2$Id)]) {
bool <- T
apply(tags2[tags2$Id == as.character(questions2$Id[i]), "Tag"], 1, function(k) ifelse(as.character(k) %in% t, bool <- (bool & T), bool <- (bool & F)))
ifelse(bool,,questions2[i,] <- NULL)
}
for (i in questions2$Id[1:length(questions2$Id)]) {
bool <- T
apply(tags2[tags2$Id == as.character(questions2$Id[i]), "Tag"], 1, function(k) ifelse(as.character(k) %in% t, bool <- (bool & T), bool <- (bool & F)))
ifelse(bool,"ok",questions2[i,] <- NULL)
}
ifelse(c("array", "python") %in% t, print("yes"), print("no"))
ifelse(c("array", "k") %in% t, print("yes"), print("no"))
ifelse(c("array") %in% t, print("yes"), print("no"))
ifelse(c("ar", "k") %in% t, print("yes"), print("no"))
ifelse(c("ar", "k") %in% t, print("yes"), print("no"))[0]
ifelse(c("ar", "k") %in% t, print("yes"), print("no"))[1]
ifelse(c("ar", "k") %in% t, print("yes"), print("no"))[4]
c("ar", "k") %in% t
ifelse(c("ar", "k") %in% t, print("yes"), print("no"))[4]
ifelse(c("ar", "k") %in% t, print("yes"), print("no"))
ifelse(c("array", "k") %in% t, print("yes"), print("no"))
if(c("array", "k") %in% t){ print("yes")}else{ print("no")}
if(c("array") %in% t){ print("yes")}else{ print("no")}
T & F
for (i in questions2$Id[1:length(questions2$Id)]) {
bool <- T
apply(tags2[tags2$Id == as.character(questions2$Id[i]), "Tag"], 1, function(k) ifelse(as.character(k) %in% t, bool <- (bool & T), bool <- (bool & F)))
ifelse(bool,"ok",questions2[i,] <- NULL)
}
tags2 <- aggregate(Tag~Id, tags, paste)
View(tags2)
questions2[questions2$Id = 1829,]
questions2[questions2$Id == 1829,]
questions2$Tags <- tags2[tags2$Id == questions2$Id, "Tag"]
View(tags2[tags2$Id == questions2$Id, "Tag"])
View(tags2[questions2$Id == tags$Id, "Tag"])
tags2$Id %in% questions2$Id
tags2$Id %not in% questions2$Id
tags2$Id %!in% questions2$Id
tags2$Id !%in% questions2$Id
!tags2$Id %in% questions2$Id
tags[!(tags2$Id %in% questions2$Id),]
tags[(tags2$Id %in% questions2$Id),]
View(tags2$Id %in% questions2$Id)
View(tags2[tags2$Id == 606523, "Tag"])
tags2[tags2$Id == 606523, "Tag"]
View(!(tags2$Id %in% questions2$Id))
tags2[606523,]
questions2[questions2$Id == 40115300, "Tag"]
questions2[questions2$Id == 40115300,]
#View(!(tags2$Id %in% questions2$Id)) row 606523contains an id not in questions$Id
tags2[606523,] <- null
#View(!(tags2$Id %in% questions2$Id)) row 606523contains an id not in questions$Id
tags2[606523,] <- NULL
#View(!(tags2$Id %in% questions2$Id)) row 606523contains an id not in questions$Id
tags2[606523] <- NULL
#View(!(tags2$Id %in% questions2$Id)) row 606523contains an id not in questions$Id
tags2[606523,] <- NULL
#View(!(tags2$Id %in% questions2$Id)) row 606523contains an id not in questions$Id
tags2 <- tags2[-c(606523),]
row.names(tags2) <- NULL
questions2$Tags <- tags2[tags2$Id == questions2$Id, "Tag"]
View(questions2)
View(answers2)
questions2[, ("OwnerUserId", "Score")] <- NULL
questions2[, c("OwnerUserId", "Score")] <- NULL
View(questions2$Tags %in% t)
View(questions2$Tags[5] %in% t)
questions2$Tags[5] %in% t
questions2$Tags[5]
questions2$Tags[12]
as.vector(questions2$Tags[5])
length(questions2$Tags[5])
length(as.vector(questions2$Tags[5]))
class(questions2$Tags[5])
class(as.vector(questions2$Tags[5]))
typeof(questions2$Tags[5])
c("h", "j")
class(c("h", "j"))
length(c("h", "j"))
unlist(questions2$Tags[5])
length(unlist(questions2$Tags[5]))
View(unlist(questions2$Tags) %in% t)
View(unlist(questions2$Tags))
View(apply(questions2$Tags, 1, function(x) unlist(x)))
View(apply(questions2$Tags, 2, function(x) unlist(x)))
View(apply(questions2$Tags, 1, function(x) unlist(x)))
View(apply(questions2$Tags, 1, function(x) x))
View(apply(questions2$Tags, 1, x))
View(apply(questions2$Tags, 1, function(x) print(x)))
apply(questions2$Tags, 1, function(x) print(x))
apply(questions2$Tags, 1, function(i) print(i))
class(questions2$Tags)
View(unlist(questions2$Tags, recursive = T))
View(unlist(questions2$Tags, recursive = F))
View(unlist(questions2$Tags[1]))
as.factor(unlist(questions2$Tags))
as.factor(questions2$Tags)
View(lapply(questions2$Tags, 1, function(i) unlist(i)))
View(lapply(questions2$Tags, function(i) unlist(i)))
lapply(questions2$Tags, function(i) unlist(i))[1:3]
questions$Tags <- lapply(questions2$Tags, function(i) unlist(i))
class(questions2$Tags[2])
class(unlist(questions2$Tags[2]))
lapply(questions2$Tags, function(i) (unlist(i) %in% t))
vIEW(lapply(questions2$Tags, function(i) (unlist(i) %in% t)))
View(lapply(questions2$Tags, function(i) (unlist(i) %in% t)))
sum(c(F,T))
sum(c(F,F))
sum(c(F,F,F))
sum(c(F,F,T, T))
aggregate(c(F,F,T, T))
max(c(F,F,T, T))
min(c(F,F,T, T))
i <- lapply(questions2$Tags, function(i) (unlist(i) %in% t))
View(i)
i <- apply(questions2$Tags,1, function(i) (unlist(i) %in% t))
i <- sapply(questions2$Tags, function(i) (unlist(i) %in% t))
i <- sapply(questions2$Tags, function(i) (unlist(i) %in% t))$Value
i
i <- sapply(questions2$Tags, function(i) (unlist(i) %in% t))
View(i)
i$
h
i
View(unlist(i))
save <- questions2
save$Tags <- sapply(questions2$Tags, function(i) (unlist(i) %in% t))
View(save)
class(save$Tags)
class(save$Tags[1])
remove(save)
questions2$Tags[1][i[1]]
i[1]
questions2$Tags[1]
questions2$Tags[1][1]
questions2$Tags[1][3]
questions2$Tags[1][2]
questions2$Tags[1][0]
questions2$Tags[1][1][1]
questions2$Tags[1][1][1][1]
questions2$Tags[1][1][1][1][1]
questions2$Tags[1][1][1][1][2]
questions2$Tags[1][1][1][1][2,]
questions2$Tags[1][1][1][1][.2]
questions2$Tags[1][1][1][1][,2]
questions2$Tags[1][[1]]
questions2$Tags[1][[2]]
questions2$Tags[1][[1]]
questions2$Tags[1][[1]][1]
questions2$Tags[1][[1]]i[1]
i[1]
i[[1]]
questions2$Tags[1][[1]]i[[1]]
questions2$Tags[1][[1]][i[[1]]]
questions2$Tags[2][[1]][i[[1]]]
questions2$Tags[3][[1]][i[[1]]]
questions2$Tags[5][[1]][i[[1]]]
questions2$Tags[7][[1]][i[[1]]]
questions2$Tags[7][[1]][i[[7]]]
i[1]
i[1][[2]]
i[1][[1]]
i[2][[1]]
i[2][[2]]
i[2][[1]]
i[[2]]
questions2$Tags[8][[1]][i[[8]]]
isTRUE(i[[2]])
isTRUE(i[[8]])
all(i[[8]])
all(i[[7]])
save <- questions2[sapply(questions2$Tags, function(i) all(unlist(i) %in% t)),]
View(save)
remove(i)
#sapply obtains the Tags feature to process each row -- unlist produces a vector from the list in each cell -- %in% part checks if the elements in the vector are in the predetermined tags desired (generates a vector of boolean, each boolean corresponding to respective element) -- all checks if all the booleans are true
questions3 <- questions2[sapply(questions2$Tags, function(i) all(unlist(i) %in% t)),]
remove(save)
View(questions3)
questions3 <- questions3[questions3$Tags != "python",]
summary(questions3)
View(sapply(questions3$Tags, function(i) unlist(i)))
View(apply(questions3[,"Tags",drop=F], 1, function(i) unlist(i)))
str(questions3)
summary(questions3[,1:4])
questions3$Body <- gsub("^<[a-zA-Z0-9]>$", "", questions3$Body, ignore.case = T)
questions3$Body <- gsub("(^<[a-zA-Z0-9]>$)", "", questions3$Body, ignore.case = T)
questions3$Body <- gsub("(<[a-zA-Z0-9]>)", "", questions3$Body, ignore.case = T)
questions3$Body <- gsub("(<[//a-zA-Z0-9]>)", "", questions3$Body, ignore.case = T)
questions3$Body <- gsub("(<[a-zA-Z0-9//]>)", "", questions3$Body, ignore.case = T)
questions3$Body <- gsub("(</[a-zA-Z0-9]>)", "", questions3$Body, ignore.case = T)
#sapply obtains the Tags feature to process each row -- unlist produces a vector from the list in each cell -- %in% part checks if the elements in the vector are in the predetermined tags desired (generates a vector of boolean, each boolean corresponding to respective element) -- all checks if all the booleans are true
questions3 <- questions2[sapply(questions2$Tags, function(i) all(unlist(i) %in% t)),]
questions3 <- questions3[questions3$Tags != "python",]
summary(questions3[,1:4])
#questions3$
Body <- gsub("(<[/a-zA-Z0-9]>)", "", questions3$Body, ignore.case = T)
View(Body)
#questions3$
Body <- gsub("(<[a-zA-Z0-9]>)", "", questions3$Body, ignore.case = T)
#questions3$
Body <- gsub("(<[a-zA-Z0-9//]>)", "", questions3$Body, ignore.case = T)
#questions3$
Body <- gsub("<[a-zA-Z0-9//]>", "", questions3$Body, ignore.case = T)
#questions3$
library(stringr)
Body <- str_replace_all(questions3$Body,"<[a-zA-Z0-9//]>", "")
Body <- str_replace_all(questions3$Body,"(<[a-zA-Z0-9//]>)", "")
View(Body)
questions2 <- questions2[sapply(questions2$Tags, function(i) all(unlist(i) %in% t)),]
questions2 <- questions2[questions2$Tags != "python",]
#sapply obtains the Tags feature to process each row -- unlist produces a vector from the list in each cell -- %in% part checks if the elements in the vector are in the predetermined tags desired (generates a vector of boolean, each boolean corresponding to respective element) -- all checks if all the booleans are true
questions2 <- questions2[sapply(questions2$Tags, function(i) all(unlist(i) %in% t)),]
questions2$Tags <- tags2[tags2$Id == questions2$Id, "Tag"]
questions2 <- questions
tags2 <- tags
tags2 <- aggregate(Tag~Id, tags, paste)
tags2 <- aggregate(Tag~Id, tags, paste)
#View(!(tags2$Id %in% questions2$Id)) row 606523contains an id not in questions$Id
tags2 <- tags2[-c(606523),]
row.names(tags2) <- NULL
questions2$Tags <- tags2[tags2$Id == questions2$Id, "Tag"]
questions2[, c("OwnerUserId", "Score")] <- NULL
#sapply obtains the Tags feature to process each row -- unlist produces a vector from the list in each cell -- %in% part checks if the elements in the vector are in the predetermined tags desired (generates a vector of boolean, each boolean corresponding to respective element) -- all checks if all the booleans are true
questions2 <- questions2[sapply(questions2$Tags, function(i) all(unlist(i) %in% t)),]
questions2 <- questions2[questions2$Tags != "python",]
questions3 <- questions2
summary(questions3[,1:4])
Body <- str_replace_all(questions3$Body,"(<[a-zA-Z0-9//]>)", " ")
remove(bool)
remove(Body)
body <- str_remove_all(questions3$Body,"(<[a-zA-Z0-9//]>)")
View(body)
str_match_all(questions3$Body[3],"(<[a-zA-Z0-9//]>)")
str_match_all(questions3$Body[3],"(</[a-zA-Z0-9]>)")
str_match_all(questions3$Body[3],"(<[/a-zA-Z0-9]>)")
str_match_all(questions3$Body[3],"(<[//a-zA-Z0-9]>)")
str_match_all(questions3$Body[3],"<[a-zA-Z0-9]>")
str_match_all(questions3$Body[3],"<//[a-zA-Z0-9]>")
str_match_all(questions3$Body[3],"</[a-zA-Z0-9]>")
str_match_all(questions3$Body[3],"(<[a-zA-Z0-9]>)")
questions3$Body[3]
str_match_all(questions3$Body[3],"(<[a-zA-Z0-9]>|</[a-zA-Z0-9]>)")
str_replace_all(questions3$Body[3],"(<[a-zA-Z0-9]>|</[a-zA-Z0-9]>)")
str_remove_all(questions3$Body[3],"(<[a-zA-Z0-9]>|</[a-zA-Z0-9]>)")
str_remove_all(questions3$Body[3],"(<[a-zA-Z0-9//]*>")
str_remove_all(questions3$Body[3],"(<[a-zA-Z0-9//]+>")
str_remove_all(questions3$Body[3],"(<[a-zA-Z0-9//]*>)")
questions3$Body <- str_remove_all(questions3$Body,"(<[a-zA-Z0-9//]*>)")
remove(body)
questions3 <- questions2
summary(questions3[,1:4])
questions3$Body <- str_replace_all(questions3$Body,"(<[a-zA-Z0-9//]*>)", " ")
questions3 <- questions2
summary(questions3[,1:4])
questions3$Body <- str_replace_all(questions3$Body,"(<.*>)", " ")
questions3 <- questions2
summary(questions3[,1:4])
questions3$Body <- str_replace_all(questions3$Body,"(<[a-zA-Z0-9//_:/"/.]*>)", " ")
questions3$Body <- str_replace_all(questions3$Body,"(<[a-zA-Z0-9//_:"/.]*>)", " ")
questions3$Body <- str_replace_all(questions3$Body,"(<[a-zA-Z0-9//_:/.]*>)", " ")
questions3$Body <- str_replace_all(questions3$Body,"(<[/"a-zA-Z0-9//_:/.]*>)", " ")
questions3$Body <- str_replace_all(questions3$Body,"(<[[:punc:]a-zA-Z0-9//_:/.]*>)", " ")
questions3$Body <- str_replace_all(questions3$Body,"(<[:punc:]|[a-zA-Z0-9//_:/.]*>)", " ")
questions3$Body <- str_replace_all(questions3$Body,"(<[[:punct:]a-zA-Z0-9//_:/.]*>)", " ")
questions3$Body <- str_replace_all(questions3$Body,"(<[[:punct:]\"a-zA-Z0-9\/_:\.]*>)", " ")
questions3$Body <- str_replace_all(questions3$Body,"(<[[:punct:]\"a-zA-Z0-9//_:/.]*>)", " ")
questions3$Body <- str_replace_all(questions3$Body,"(<[[:punct:]\"a-zA-Z0-9//_:/.]*=>)", " ")
questions3$Body <- str_replace_all(questions3$Body,"(<[[:punct:]\"a-zA-Z0-9//_:/./-]*=>)", " ")
questions3$Body <- str_replace_all(questions3$Body,"(<[ \"a-zA-Z0-9//_:/./-]*=>)", " ")
questions3$Body <- str_replace_all(questions3$Body,"(<[ \"a-zA-Z0-9//_:/./-=]*>)", " ")
questions3$Body <- str_replace_all(questions3$Body,"(<[ \"a-zA-Z0-9\/_:/./-=]*>)", " ")
questions3$Body <- str_replace_all(questions3$Body,"(<[ \"a-zA-Z0-9/_:/./-=]*>)", " ")
questions3$Body <- str_replace_all(questions3$Body,"(<[ \"a-zA-Z0-9_:/./-=//]*>)", " ")
str_match_all(<a href=""http://docs.python.org/lib/built-in-funcs.html"">,"(<[ \"a-zA-Z0-9_:/./-=//]*>)")
str_match_all(<a href="http://docs.python.org/lib/built-in-funcs.html">,"(<[ \"a-zA-Z0-9_:/./-=//]*>)")
str_match_all("<a href=""http://docs.python.org/lib/built-in-funcs.html"">","(<[ \"a-zA-Z0-9_:/./-=//]*>)")
str_match_all("<a href=http://docs.python.org/lib/built-in-funcs.html>","(<[ \"a-zA-Z0-9_:/./-=//]*>)")
str_remove_all("<a href=http://docs.python.org/lib/built-in-funcs.html>","(<[ \"a-zA-Z0-9_:/./-=//]*>)")
str_remove_all("<a href=http://docs.python.org/lib/built-in-funcs.html>","(<[= \"a-zA-Z0-9_:/./-//]*>)")
str_remove_all("<a href=http://docs.python.org/lib/built-in-funcs.html>","(<[= \"a-zA-Z0-9_:./-//]*>)")
str_remove_all("<a href=http://docs.python.org/lib/built-in-funcs.html>","."
)
str_remove_all("<a href=http://docs.python.org/lib/built-in-funcs.html>","(.)")
str_remove_all("<a href=http://docs.python.org/lib/built-in-funcs.html>","(/.)")
str_remove_all("<a href=http://docs.python.org/lib/built-in-funcs.html>","(\.)")
str_remove_all("<a href=http://docs.python.org/lib/built-in-funcs.html>","(/.)")
str_remove_all("<a href=http://docs.python.org/lib/built-in-funcs.html>","([:punct:])")
str_remove_all("<a href=http://docs.python.org/lib/built-in-funcs.html>","([[:punct:]=])")
questions3$Body <- str_replace_all(questions3$Body,"(<[[:punct:] a-zA-Z0-9]*>)", " ")
questions3$Body <- str_replace_all(questions3$Body,"(<[[:punct:] a-zA-Z0-9\"]*>)", " ")
str_remove_all("<a href=http://docs.python.org/lib/built-in-funcs.html>","([:punct:])")
str_remove_all("<a href=http://docs.python.org/lib/built-in-funcs.html>","([a-zA-z[:punct:]])")
str_remove_all("<a href=http://docs.python.org/lib/built-in-funcs.html>","([a-zA-z[:punct:]= ])")
str_remove_all("<a href=http://docs.python.org/lib/built-in-funcs.html>","(<[a-zA-z[:punct:]= ]>)")
str_remove_all("<a href=http://docs.python.org/lib/built-in-funcs.html>","(<[a-zA-z[:punct:]= ]*>)")
questions3$Body <- str_replace_all(questions3$Body,"(<[a-zA-z0-9[:punct:]= ]*>)", " ")
questions3$Body <- str_replace_all(questions3$Body,"(<[a-zA-z0-9[:punct:]= ]*>|\"\"\"\")", " ")
questions3$Body <- str_replace_all(questions3$Body,"(\"\"\"\")", " ")
questions3$Body <- str_replace_all(questions3$Body,"(\"\")", "\")
questions3 <- questions2
)
)
;
""
"
questions3 <- questions2
summary(questions3[,1:4])
questions3$Body <- str_replace_all(questions3$Body,"(<[a-zA-z0-9[:punct:]= ]*>", " ")
questions3$Body <- str_replace_all(questions3$Body,"(<[a-zA-z0-9[:punct:]= ]*>)", " ")
questions3$Body <- str_replace_all(questions3$Body,"(\"\"\"\")", " ")
questions3$Body <- str_replace_all(questions3$Body,"(\"\")", "'")
write.csv(questions3, file="questionsData.csv")
questions4 <- questions3
questions4$Tags <- vapply(questions3$Tags, paste, collapse = ", ", character(1L))
View(questions4)
write.csv(questions3, file="questionsData.csv", row.names = FALSE)
write.csv(questions4, file="questionsData.csv", row.names = FALSE)
